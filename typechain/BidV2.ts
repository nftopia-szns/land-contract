/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BidV2Interface extends utils.Interface {
  functions: {
    "ERC721Composable_ValidateFingerprint()": FunctionFragment;
    "ERC721_Interface()": FunctionFragment;
    "ERC721_Received()": FunctionFragment;
    "MAX_BID_DURATION()": FunctionFragment;
    "MIN_BID_DURATION()": FunctionFragment;
    "ONE_MILLION()": FunctionFragment;
    "bidCounterByToken(address,uint256)": FunctionFragment;
    "bidIdByTokenAndBidder(address,uint256,address)": FunctionFragment;
    "bidIndexByBidId(bytes32)": FunctionFragment;
    "cancelBid(address,uint256)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "feesCollectorCutPerMillion()": FunctionFragment;
    "getBidByBidder(address,uint256,address)": FunctionFragment;
    "getBidByToken(address,uint256,uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "manaToken()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "placeBid(address,uint256,uint256,uint256)": FunctionFragment;
    "placeBid(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "removeExpiredBids(address[],uint256[],address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltiesCutPerMillion()": FunctionFragment;
    "royaltiesManager()": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setFeesCollectorCutPerMillion(uint256)": FunctionFragment;
    "setRoyaltiesCutPerMillion(uint256)": FunctionFragment;
    "setRoyaltiesManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC721Composable_ValidateFingerprint"
      | "ERC721_Interface"
      | "ERC721_Received"
      | "MAX_BID_DURATION"
      | "MIN_BID_DURATION"
      | "ONE_MILLION"
      | "bidCounterByToken"
      | "bidIdByTokenAndBidder"
      | "bidIndexByBidId"
      | "cancelBid"
      | "domainSeparator"
      | "executeMetaTransaction"
      | "feesCollector"
      | "feesCollectorCutPerMillion"
      | "getBidByBidder"
      | "getBidByToken"
      | "getChainId"
      | "getNonce"
      | "manaToken"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "placeBid(address,uint256,uint256,uint256)"
      | "placeBid(address,uint256,uint256,uint256,bytes)"
      | "removeExpiredBids"
      | "renounceOwnership"
      | "royaltiesCutPerMillion"
      | "royaltiesManager"
      | "setFeesCollector"
      | "setFeesCollectorCutPerMillion"
      | "setRoyaltiesCutPerMillion"
      | "setRoyaltiesManager"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC721Composable_ValidateFingerprint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_Received",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BID_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BID_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_MILLION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidCounterByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidIdByTokenAndBidder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidIndexByBidId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollectorCutPerMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidByBidder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidByToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "manaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid(address,uint256,uint256,uint256)",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid(address,uint256,uint256,uint256,bytes)",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExpiredBids",
    values: [string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesCutPerMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollectorCutPerMillion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesCutPerMillion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721Composable_ValidateFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BID_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BID_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_MILLION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidCounterByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidIdByTokenAndBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidIndexByBidId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollectorCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidByBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBid(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeBid(address,uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExpiredBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollectorCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesCutPerMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(bytes32,address,uint256,address,address,uint256,uint256)": EventFragment;
    "BidCancelled(bytes32,address,uint256,address)": EventFragment;
    "BidCreated(bytes32,address,uint256,address,uint256,uint256,bytes)": EventFragment;
    "ChangedFeesCollectorCutPerMillion(uint256)": EventFragment;
    "ChangedRoyaltiesCutPerMillion(uint256)": EventFragment;
    "FeesCollectorSet(address,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoyaltiesManagerSet(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedFeesCollectorCutPerMillion"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedRoyaltiesCutPerMillion"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BidAcceptedEventObject {
  _id: string;
  _tokenAddress: string;
  _tokenId: BigNumber;
  _bidder: string;
  _seller: string;
  _price: BigNumber;
  _fee: BigNumber;
}
export type BidAcceptedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, BigNumber],
  BidAcceptedEventObject
>;

export type BidAcceptedEventFilter = TypedEventFilter<BidAcceptedEvent>;

export interface BidCancelledEventObject {
  _id: string;
  _tokenAddress: string;
  _tokenId: BigNumber;
  _bidder: string;
}
export type BidCancelledEvent = TypedEvent<
  [string, string, BigNumber, string],
  BidCancelledEventObject
>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export interface BidCreatedEventObject {
  _id: string;
  _tokenAddress: string;
  _tokenId: BigNumber;
  _bidder: string;
  _price: BigNumber;
  _expiresAt: BigNumber;
  _fingerprint: string;
}
export type BidCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string],
  BidCreatedEventObject
>;

export type BidCreatedEventFilter = TypedEventFilter<BidCreatedEvent>;

export interface ChangedFeesCollectorCutPerMillionEventObject {
  _feesCollectorCutPerMillion: BigNumber;
}
export type ChangedFeesCollectorCutPerMillionEvent = TypedEvent<
  [BigNumber],
  ChangedFeesCollectorCutPerMillionEventObject
>;

export type ChangedFeesCollectorCutPerMillionEventFilter =
  TypedEventFilter<ChangedFeesCollectorCutPerMillionEvent>;

export interface ChangedRoyaltiesCutPerMillionEventObject {
  _royaltiesCutPerMillion: BigNumber;
}
export type ChangedRoyaltiesCutPerMillionEvent = TypedEvent<
  [BigNumber],
  ChangedRoyaltiesCutPerMillionEventObject
>;

export type ChangedRoyaltiesCutPerMillionEventFilter =
  TypedEventFilter<ChangedRoyaltiesCutPerMillionEvent>;

export interface FeesCollectorSetEventObject {
  _oldFeesCollector: string;
  _newFeesCollector: string;
}
export type FeesCollectorSetEvent = TypedEvent<
  [string, string],
  FeesCollectorSetEventObject
>;

export type FeesCollectorSetEventFilter =
  TypedEventFilter<FeesCollectorSetEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoyaltiesManagerSetEventObject {
  _oldRoyaltiesManager: string;
  _newRoyaltiesManager: string;
}
export type RoyaltiesManagerSetEvent = TypedEvent<
  [string, string],
  RoyaltiesManagerSetEventObject
>;

export type RoyaltiesManagerSetEventFilter =
  TypedEventFilter<RoyaltiesManagerSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BidV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BidV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ERC721_Interface(overrides?: CallOverrides): Promise<[string]>;

    ERC721_Received(overrides?: CallOverrides): Promise<[string]>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_MILLION(overrides?: CallOverrides): Promise<[BigNumber]>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelBid(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBidByBidder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        bidIndex: BigNumber;
        bidId: string;
        bidder: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    getBidByToken(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    manaToken(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      _from: string,
      arg1: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "placeBid(address,uint256,uint256,uint256)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "placeBid(address,uint256,uint256,uint256,bytes)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _fingerprint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeExpiredBids(
      _tokenAddresses: string[],
      _tokenIds: BigNumberish[],
      _bidders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltiesManager(overrides?: CallOverrides): Promise<[string]>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesManager(
      _newRoyaltiesManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC721Composable_ValidateFingerprint(
    overrides?: CallOverrides
  ): Promise<string>;

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  ERC721_Received(overrides?: CallOverrides): Promise<string>;

  MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

  bidCounterByToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidIdByTokenAndBidder(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<string>;

  bidIndexByBidId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelBid(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  getBidByBidder(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _bidder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      bidIndex: BigNumber;
      bidId: string;
      bidder: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  getBidByToken(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber]>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  manaToken(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    _from: string,
    arg1: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "placeBid(address,uint256,uint256,uint256)"(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "placeBid(address,uint256,uint256,uint256,bytes)"(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _duration: BigNumberish,
    _fingerprint: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeExpiredBids(
    _tokenAddresses: string[],
    _tokenIds: BigNumberish[],
    _bidders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  royaltiesManager(overrides?: CallOverrides): Promise<string>;

  setFeesCollector(
    _newFeesCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCollectorCutPerMillion(
    _feesCollectorCutPerMillion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesCutPerMillion(
    _royaltiesCutPerMillion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesManager(
    _newRoyaltiesManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<string>;

    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    ERC721_Received(overrides?: CallOverrides): Promise<string>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<string>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBid(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    getBidByBidder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        bidIndex: BigNumber;
        bidId: string;
        bidder: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    getBidByToken(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    manaToken(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      _from: string,
      arg1: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "placeBid(address,uint256,uint256,uint256)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "placeBid(address,uint256,uint256,uint256,bytes)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeExpiredBids(
      _tokenAddresses: string[],
      _tokenIds: BigNumberish[],
      _bidders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    royaltiesManager(overrides?: CallOverrides): Promise<string>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltiesManager(
      _newRoyaltiesManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BidAccepted(bytes32,address,uint256,address,address,uint256,uint256)"(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: null,
      _seller?: string | null,
      _price?: null,
      _fee?: null
    ): BidAcceptedEventFilter;
    BidAccepted(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: null,
      _seller?: string | null,
      _price?: null,
      _fee?: null
    ): BidAcceptedEventFilter;

    "BidCancelled(bytes32,address,uint256,address)"(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: string | null
    ): BidCancelledEventFilter;
    BidCancelled(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: string | null
    ): BidCancelledEventFilter;

    "BidCreated(bytes32,address,uint256,address,uint256,uint256,bytes)"(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: string | null,
      _price?: null,
      _expiresAt?: null,
      _fingerprint?: null
    ): BidCreatedEventFilter;
    BidCreated(
      _id?: null,
      _tokenAddress?: string | null,
      _tokenId?: BigNumberish | null,
      _bidder?: string | null,
      _price?: null,
      _expiresAt?: null,
      _fingerprint?: null
    ): BidCreatedEventFilter;

    "ChangedFeesCollectorCutPerMillion(uint256)"(
      _feesCollectorCutPerMillion?: null
    ): ChangedFeesCollectorCutPerMillionEventFilter;
    ChangedFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion?: null
    ): ChangedFeesCollectorCutPerMillionEventFilter;

    "ChangedRoyaltiesCutPerMillion(uint256)"(
      _royaltiesCutPerMillion?: null
    ): ChangedRoyaltiesCutPerMillionEventFilter;
    ChangedRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion?: null
    ): ChangedRoyaltiesCutPerMillionEventFilter;

    "FeesCollectorSet(address,address)"(
      _oldFeesCollector?: string | null,
      _newFeesCollector?: string | null
    ): FeesCollectorSetEventFilter;
    FeesCollectorSet(
      _oldFeesCollector?: string | null,
      _newFeesCollector?: string | null
    ): FeesCollectorSetEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoyaltiesManagerSet(address,address)"(
      _oldRoyaltiesManager?: string | null,
      _newRoyaltiesManager?: string | null
    ): RoyaltiesManagerSetEventFilter;
    RoyaltiesManagerSet(
      _oldRoyaltiesManager?: string | null,
      _newRoyaltiesManager?: string | null
    ): RoyaltiesManagerSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_Received(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBid(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feesCollectorCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    getBidByBidder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidByToken(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    manaToken(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      _from: string,
      arg1: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "placeBid(address,uint256,uint256,uint256)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "placeBid(address,uint256,uint256,uint256,bytes)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _fingerprint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeExpiredBids(
      _tokenAddresses: string[],
      _tokenIds: BigNumberish[],
      _bidders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltiesCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    royaltiesManager(overrides?: CallOverrides): Promise<BigNumber>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesManager(
      _newRoyaltiesManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC721_Received(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_MILLION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBid(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesCollectorCutPerMillion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidByBidder(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidByToken(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      _from: string,
      arg1: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "placeBid(address,uint256,uint256,uint256)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "placeBid(address,uint256,uint256,uint256,bytes)"(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _fingerprint: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeExpiredBids(
      _tokenAddresses: string[],
      _tokenIds: BigNumberish[],
      _bidders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesCutPerMillion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltiesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newFeesCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollectorCutPerMillion(
      _feesCollectorCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesCutPerMillion(
      _royaltiesCutPerMillion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesManager(
      _newRoyaltiesManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
