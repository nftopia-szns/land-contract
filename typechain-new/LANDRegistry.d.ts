/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LANDRegistryInterface extends ethers.utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "proxyOwner()": FunctionFragment;
    "name()": FunctionFragment;
    "updateManager(address,address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "ownerOfLand(int256,int256)": FunctionFragment;
    "setLatestToNow(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unregisterBalance()": FunctionFragment;
    "assignNewParcel(int256,int256,address)": FunctionFragment;
    "ownerOfLandMany(int256[],int256[])": FunctionFragment;
    "latestPing(address)": FunctionFragment;
    "updateManyLandData(int256[],int256[],string)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "isAuthorized(address,uint256)": FunctionFragment;
    "authorizedDeploy(address)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "authorizeDeploy(address)": FunctionFragment;
    "transferLand(int256,int256,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "landData(int256,int256)": FunctionFragment;
    "transferManyLand(int256[],int256[],address)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "tokensOf(address)": FunctionFragment;
    "ping()": FunctionFragment;
    "registeredBalance(address)": FunctionFragment;
    "setLandBalanceToken(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "GET_METADATA()": FunctionFragment;
    "isUpdateAuthorized(address,uint256)": FunctionFragment;
    "tokenMetadata(uint256)": FunctionFragment;
    "encodeTokenId(int256,int256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "currentContract()": FunctionFragment;
    "setManyUpdateOperator(uint256[],address)": FunctionFragment;
    "description()": FunctionFragment;
    "decodeTokenId(uint256)": FunctionFragment;
    "landBalance()": FunctionFragment;
    "assignMultipleParcels(int256[],int256[],address)": FunctionFragment;
    "createEstateWithMetadata(int256[],int256[],address,string)": FunctionFragment;
    "landOf(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setEstateRegistry(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "updateOperator(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setUpdateOperator(uint256,address)": FunctionFragment;
    "registerBalance()": FunctionFragment;
    "createEstate(int256[],int256[],address)": FunctionFragment;
    "updateLandData(int256,int256,string)": FunctionFragment;
    "estateRegistry()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "getApprovedAddress(uint256)": FunctionFragment;
    "setUpdateManager(address,address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferManyLandToEstate(int256[],int256[],uint256)": FunctionFragment;
    "transferLandToEstate(int256,int256,uint256)": FunctionFragment;
    "forbidDeploy(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfLand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestToNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignNewParcel",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfLandMany",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "latestPing", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateManyLandData",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedDeploy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizeDeploy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLand",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "landData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferManyLand",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokensOf", values: [string]): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registeredBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandBalanceToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_METADATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdateAuthorized",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setManyUpdateOperator",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "landBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignMultipleParcels",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEstateWithMetadata",
    values: [BigNumberish[], BigNumberish[], string, string]
  ): string;
  encodeFunctionData(functionFragment: "landOf", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEstateRegistry",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createEstate",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLandData",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "estateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateManager",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferManyLandToEstate",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLandToEstate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidDeploy",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestToNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignNewParcel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfLandMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestPing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateManyLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "landData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferManyLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandBalanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GET_METADATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpdateAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManyUpdateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "landBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignMultipleParcels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEstateWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEstateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEstate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferManyLandToEstate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLandToEstate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidDeploy",
    data: BytesLike
  ): Result;

  events: {
    "EstateRegistrySet(address)": EventFragment;
    "Update(uint256,address,address,string)": EventFragment;
    "UpdateOperator(uint256,address)": EventFragment;
    "UpdateManager(address,address,address,bool)": EventFragment;
    "DeployAuthorized(address,address)": EventFragment;
    "DeployForbidden(address,address)": EventFragment;
    "SetLandBalanceToken(address,address)": EventFragment;
    "Transfer(address,address,uint256,address,bytes,bytes)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EstateRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLandBalanceToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export type EstateRegistrySetEvent = TypedEvent<
  [string] & { registry: string }
>;

export type UpdateEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    assetId: BigNumber;
    holder: string;
    operator: string;
    data: string;
  }
>;

export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, string] & { assetId: BigNumber; operator: string }
>;

export type UpdateManagerEvent = TypedEvent<
  [string, string, string, boolean] & {
    _owner: string;
    _operator: string;
    _caller: string;
    _approved: boolean;
  }
>;

export type DeployAuthorizedEvent = TypedEvent<
  [string, string] & { _caller: string; _deployer: string }
>;

export type DeployForbiddenEvent = TypedEvent<
  [string, string] & { _caller: string; _deployer: string }
>;

export type SetLandBalanceTokenEvent = TypedEvent<
  [string, string] & { _previousLandBalance: string; _newLandBalance: string }
>;

export type Transfer_address_address_uint256_address_bytes_bytes_Event =
  TypedEvent<
    [string, string, BigNumber, string, string, string] & {
      from: string;
      to: string;
      assetId: BigNumber;
      operator: string;
      userData: string;
      operatorData: string;
    }
  >;

export type Transfer_address_address_uint256_address_bytes_Event = TypedEvent<
  [string, string, BigNumber, string, string] & {
    from: string;
    to: string;
    assetId: BigNumber;
    operator: string;
    userData: string;
  }
>;

export type Transfer_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; assetId: BigNumber }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    holder: string;
    operator: string;
    authorized: boolean;
  }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    operator: string;
    assetId: BigNumber;
  }
>;

export type OwnerUpdateEvent = TypedEvent<
  [string, string] & { _prevOwner: string; _newOwner: string }
>;

export class LANDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LANDRegistryInterface;

  functions: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxyOwner(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setLatestToNow(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unregisterBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    latestPing(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authorizedDeploy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assetId: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setLandBalanceToken(
      _newLandBalance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_METADATA(overrides?: CallOverrides): Promise<[string]>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentContract(overrides?: CallOverrides): Promise<[string]>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    description(overrides?: CallOverrides): Promise<[string]>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    landBalance(overrides?: CallOverrides): Promise<[string]>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setEstateRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estateRegistry(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forbidDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  supportsInterface(
    _interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxyOwner(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  updateManager(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  approve(
    operator: string,
    assetId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOfLand(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setLatestToNow(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  unregisterBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assignNewParcel(
    x: BigNumberish,
    y: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOfLandMany(
    x: BigNumberish[],
    y: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  latestPing(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateManyLandData(
    x: BigNumberish[],
    y: BigNumberish[],
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(
    operator: string,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authorizedDeploy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  authorizeDeploy(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLand(
    x: BigNumberish,
    y: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  landData(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferManyLand(
    x: BigNumberish[],
    y: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exists(uint256)"(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  ping(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredBalance(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setLandBalanceToken(
    _newLandBalance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  GET_METADATA(overrides?: CallOverrides): Promise<string>;

  isUpdateAuthorized(
    operator: string,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenMetadata(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeTokenId(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentContract(overrides?: CallOverrides): Promise<string>;

  setManyUpdateOperator(
    _assetIds: BigNumberish[],
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  decodeTokenId(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  landBalance(overrides?: CallOverrides): Promise<string>;

  assignMultipleParcels(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEstateWithMetadata(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  landOf(
    owner: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  owner(overrides?: CallOverrides): Promise<string>;

  setEstateRegistry(
    registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  updateOperator(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setApprovalForAll(
    operator: string,
    authorized: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdateOperator(
    assetId: BigNumberish,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEstate(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLandData(
    x: BigNumberish,
    y: BigNumberish,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estateRegistry(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    assetHolder: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApprovedAddress(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setUpdateManager(
    _owner: string,
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferManyLandToEstate(
    x: BigNumberish[],
    y: BigNumberish[],
    estateId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLandToEstate(
    x: BigNumberish,
    y: BigNumberish,
    estateId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forbidDeploy(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxyOwner(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setLatestToNow(user: string, overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterBalance(overrides?: CallOverrides): Promise<void>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    latestPing(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizedDeploy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    ping(overrides?: CallOverrides): Promise<void>;

    registeredBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLandBalanceToken(
      _newLandBalance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    GET_METADATA(overrides?: CallOverrides): Promise<string>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentContract(overrides?: CallOverrides): Promise<string>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    description(overrides?: CallOverrides): Promise<string>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    landBalance(overrides?: CallOverrides): Promise<string>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<string>;

    setEstateRegistry(
      registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerBalance(overrides?: CallOverrides): Promise<void>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    estateRegistry(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forbidDeploy(beneficiary: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EstateRegistrySet(address)"(
      registry?: string | null
    ): TypedEventFilter<[string], { registry: string }>;

    EstateRegistrySet(
      registry?: string | null
    ): TypedEventFilter<[string], { registry: string }>;

    "Update(uint256,address,address,string)"(
      assetId?: BigNumberish | null,
      holder?: string | null,
      operator?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { assetId: BigNumber; holder: string; operator: string; data: string }
    >;

    Update(
      assetId?: BigNumberish | null,
      holder?: string | null,
      operator?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { assetId: BigNumber; holder: string; operator: string; data: string }
    >;

    "UpdateOperator(uint256,address)"(
      assetId?: BigNumberish | null,
      operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; operator: string }
    >;

    UpdateOperator(
      assetId?: BigNumberish | null,
      operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; operator: string }
    >;

    "UpdateManager(address,address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    UpdateManager(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    "DeployAuthorized(address,address)"(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    DeployAuthorized(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    "DeployForbidden(address,address)"(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    DeployForbidden(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    "SetLandBalanceToken(address,address)"(
      _previousLandBalance?: string | null,
      _newLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousLandBalance: string; _newLandBalance: string }
    >;

    SetLandBalanceToken(
      _previousLandBalance?: string | null,
      _newLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousLandBalance: string; _newLandBalance: string }
    >;

    "Transfer(address,address,uint256,address,bytes,bytes)"(
      from?: string | null,
      to?: string | null,
      assetId?: BigNumberish | null,
      operator?: null,
      userData?: null,
      operatorData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string],
      {
        from: string;
        to: string;
        assetId: BigNumber;
        operator: string;
        userData: string;
        operatorData: string;
      }
    >;

    "Transfer(address,address,uint256,address,bytes)"(
      from?: string | null,
      to?: string | null,
      assetId?: BigNumberish | null,
      operator?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        from: string;
        to: string;
        assetId: BigNumber;
        operator: string;
        userData: string;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      assetId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; assetId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      holder?: string | null,
      operator?: string | null,
      authorized?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { holder: string; operator: string; authorized: boolean }
    >;

    ApprovalForAll(
      holder?: string | null,
      operator?: string | null,
      authorized?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { holder: string; operator: string; authorized: boolean }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      assetId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; operator: string; assetId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      operator?: string | null,
      assetId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; operator: string; assetId: BigNumber }
    >;

    "OwnerUpdate(address,address)"(
      _prevOwner?: null,
      _newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { _prevOwner: string; _newOwner: string }
    >;

    OwnerUpdate(
      _prevOwner?: null,
      _newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { _prevOwner: string; _newOwner: string }
    >;
  };

  estimateGas: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyOwner(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLatestToNow(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPing(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedDeploy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLandBalanceToken(
      _newLandBalance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_METADATA(overrides?: CallOverrides): Promise<BigNumber>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentContract(overrides?: CallOverrides): Promise<BigNumber>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    landBalance(overrides?: CallOverrides): Promise<BigNumber>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    landOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setEstateRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forbidDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLatestToNow(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregisterBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPing(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedDeploy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLandBalanceToken(
      _newLandBalance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_METADATA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    landBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEstateRegistry(
      registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estateRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forbidDeploy(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
