/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILANDRegistryInterface extends ethers.utils.Interface {
  functions: {
    "ownerOfLand(int256,int256)": FunctionFragment;
    "assignNewParcel(int256,int256,address)": FunctionFragment;
    "ownerOfLandMany(int256[],int256[])": FunctionFragment;
    "updateManyLandData(int256[],int256[],string)": FunctionFragment;
    "transferLand(int256,int256,address)": FunctionFragment;
    "landData(int256,int256)": FunctionFragment;
    "transferManyLand(int256[],int256[],address)": FunctionFragment;
    "ping()": FunctionFragment;
    "encodeTokenId(int256,int256)": FunctionFragment;
    "decodeTokenId(uint256)": FunctionFragment;
    "assignMultipleParcels(int256[],int256[],address)": FunctionFragment;
    "landOf(address)": FunctionFragment;
    "exists(int256,int256)": FunctionFragment;
    "updateLandData(int256,int256,string)": FunctionFragment;
    "setUpdateManager(address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ownerOfLand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignNewParcel",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfLandMany",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManyLandData",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLand",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "landData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferManyLand",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeTokenId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignMultipleParcels",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "landOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLandData",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateManager",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "ownerOfLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignNewParcel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfLandMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManyLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferManyLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignMultipleParcels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLandData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateManager",
    data: BytesLike
  ): Result;

  events: {
    "Update(uint256,address,address,string)": EventFragment;
    "UpdateOperator(uint256,address)": EventFragment;
    "UpdateManager(address,address,address,bool)": EventFragment;
    "DeployAuthorized(address,address)": EventFragment;
    "DeployForbidden(address,address)": EventFragment;
    "SetLandBalanceToken(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLandBalanceToken"): EventFragment;
}

export type UpdateEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    assetId: BigNumber;
    holder: string;
    operator: string;
    data: string;
  }
>;

export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, string] & { assetId: BigNumber; operator: string }
>;

export type UpdateManagerEvent = TypedEvent<
  [string, string, string, boolean] & {
    _owner: string;
    _operator: string;
    _caller: string;
    _approved: boolean;
  }
>;

export type DeployAuthorizedEvent = TypedEvent<
  [string, string] & { _caller: string; _deployer: string }
>;

export type DeployForbiddenEvent = TypedEvent<
  [string, string] & { _caller: string; _deployer: string }
>;

export type SetLandBalanceTokenEvent = TypedEvent<
  [string, string] & { _previousLandBalance: string; _newLandBalance: string }
>;

export class ILANDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILANDRegistryInterface;

  functions: {
    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    exists(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ownerOfLand(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  assignNewParcel(
    x: BigNumberish,
    y: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOfLandMany(
    x: BigNumberish[],
    y: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  updateManyLandData(
    x: BigNumberish[],
    y: BigNumberish[],
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLand(
    x: BigNumberish,
    y: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  landData(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferManyLand(
    x: BigNumberish[],
    y: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ping(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encodeTokenId(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decodeTokenId(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  assignMultipleParcels(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  landOf(
    owner: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  exists(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateLandData(
    x: BigNumberish,
    y: BigNumberish,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdateManager(
    _owner: string,
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ping(overrides?: CallOverrides): Promise<void>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    exists(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Update(uint256,address,address,string)"(
      assetId?: BigNumberish | null,
      holder?: string | null,
      operator?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { assetId: BigNumber; holder: string; operator: string; data: string }
    >;

    Update(
      assetId?: BigNumberish | null,
      holder?: string | null,
      operator?: string | null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { assetId: BigNumber; holder: string; operator: string; data: string }
    >;

    "UpdateOperator(uint256,address)"(
      assetId?: BigNumberish | null,
      operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; operator: string }
    >;

    UpdateOperator(
      assetId?: BigNumberish | null,
      operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; operator: string }
    >;

    "UpdateManager(address,address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    UpdateManager(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    "DeployAuthorized(address,address)"(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    DeployAuthorized(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    "DeployForbidden(address,address)"(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    DeployForbidden(
      _caller?: string | null,
      _deployer?: string | null
    ): TypedEventFilter<
      [string, string],
      { _caller: string; _deployer: string }
    >;

    "SetLandBalanceToken(address,address)"(
      _previousLandBalance?: string | null,
      _newLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousLandBalance: string; _newLandBalance: string }
    >;

    SetLandBalanceToken(
      _previousLandBalance?: string | null,
      _newLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousLandBalance: string; _newLandBalance: string }
    >;
  };

  estimateGas: {
    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    landOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    landOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
