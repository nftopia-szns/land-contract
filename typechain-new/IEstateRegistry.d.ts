/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IEstateRegistryInterface extends ethers.utils.Interface {
  functions: {
    "ownerOf(uint256)": FunctionFragment;
    "mint(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {
    "CreateEstate(address,uint256,string)": EventFragment;
    "AddLand(uint256,uint256)": EventFragment;
    "RemoveLand(uint256,uint256,address)": EventFragment;
    "Update(uint256,address,address,string)": EventFragment;
    "UpdateOperator(uint256,address)": EventFragment;
    "UpdateManager(address,address,address,bool)": EventFragment;
    "SetLANDRegistry(address)": EventFragment;
    "SetEstateLandBalanceToken(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateEstate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLANDRegistry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEstateLandBalanceToken"): EventFragment;
}

export type CreateEstateEvent = TypedEvent<
  [string, BigNumber, string] & {
    _owner: string;
    _estateId: BigNumber;
    _data: string;
  }
>;

export type AddLandEvent = TypedEvent<
  [BigNumber, BigNumber] & { _estateId: BigNumber; _landId: BigNumber }
>;

export type RemoveLandEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    _estateId: BigNumber;
    _landId: BigNumber;
    _destinatary: string;
  }
>;

export type UpdateEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    _assetId: BigNumber;
    _holder: string;
    _operator: string;
    _data: string;
  }
>;

export type UpdateOperatorEvent = TypedEvent<
  [BigNumber, string] & { _estateId: BigNumber; _operator: string }
>;

export type UpdateManagerEvent = TypedEvent<
  [string, string, string, boolean] & {
    _owner: string;
    _operator: string;
    _caller: string;
    _approved: boolean;
  }
>;

export type SetLANDRegistryEvent = TypedEvent<[string] & { _registry: string }>;

export type SetEstateLandBalanceTokenEvent = TypedEvent<
  [string, string] & {
    _previousEstateLandBalance: string;
    _newEstateLandBalance: string;
  }
>;

export class IEstateRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IEstateRegistryInterface;

  functions: {
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    mint(
      to: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CreateEstate(address,uint256,string)"(
      _owner?: string | null,
      _estateId?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { _owner: string; _estateId: BigNumber; _data: string }
    >;

    CreateEstate(
      _owner?: string | null,
      _estateId?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { _owner: string; _estateId: BigNumber; _data: string }
    >;

    "AddLand(uint256,uint256)"(
      _estateId?: BigNumberish | null,
      _landId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _estateId: BigNumber; _landId: BigNumber }
    >;

    AddLand(
      _estateId?: BigNumberish | null,
      _landId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _estateId: BigNumber; _landId: BigNumber }
    >;

    "RemoveLand(uint256,uint256,address)"(
      _estateId?: BigNumberish | null,
      _landId?: BigNumberish | null,
      _destinatary?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { _estateId: BigNumber; _landId: BigNumber; _destinatary: string }
    >;

    RemoveLand(
      _estateId?: BigNumberish | null,
      _landId?: BigNumberish | null,
      _destinatary?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { _estateId: BigNumber; _landId: BigNumber; _destinatary: string }
    >;

    "Update(uint256,address,address,string)"(
      _assetId?: BigNumberish | null,
      _holder?: string | null,
      _operator?: string | null,
      _data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { _assetId: BigNumber; _holder: string; _operator: string; _data: string }
    >;

    Update(
      _assetId?: BigNumberish | null,
      _holder?: string | null,
      _operator?: string | null,
      _data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { _assetId: BigNumber; _holder: string; _operator: string; _data: string }
    >;

    "UpdateOperator(uint256,address)"(
      _estateId?: BigNumberish | null,
      _operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _estateId: BigNumber; _operator: string }
    >;

    UpdateOperator(
      _estateId?: BigNumberish | null,
      _operator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _estateId: BigNumber; _operator: string }
    >;

    "UpdateManager(address,address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    UpdateManager(
      _owner?: string | null,
      _operator?: string | null,
      _caller?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { _owner: string; _operator: string; _caller: string; _approved: boolean }
    >;

    "SetLANDRegistry(address)"(
      _registry?: string | null
    ): TypedEventFilter<[string], { _registry: string }>;

    SetLANDRegistry(
      _registry?: string | null
    ): TypedEventFilter<[string], { _registry: string }>;

    "SetEstateLandBalanceToken(address,address)"(
      _previousEstateLandBalance?: string | null,
      _newEstateLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousEstateLandBalance: string; _newEstateLandBalance: string }
    >;

    SetEstateLandBalanceToken(
      _previousEstateLandBalance?: string | null,
      _newEstateLandBalance?: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousEstateLandBalance: string; _newEstateLandBalance: string }
    >;
  };

  estimateGas: {
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
